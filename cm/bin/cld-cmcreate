#!/bin/bash
source /var/cld/bin/include/cldfuncs
[ "$SUDO_USER" = "" ] && SUDO_USER=admin
source /var/cld/cm/bin/include/bot
source /var/cld/cm/bin/include/create_funcs
source /var/cld/cm/bin/include/create_vars
mkdir -p /var/log/cld/cm /var/cld/cm/data &>/dev/null
echo  "`date` - ${@:0}" >> /var/log/cld/cm/cmd_create.log
touch /var/cld/cm/LOCK
CMLOCK=$(cat /var/cld/cm/LOCK)
if grep -q "1" /var/cld/cm/LOCK ; then echo "${@:0}" >> /var/cld/cm/data/queue_create
echo LOCK detected, do you want FORCE UNLOCK ?
select LOCK in yes no
do
if [ "$LOCK" == yes ]
then
echo
else
exit 0
fi
break
done
else echo 1 > /var/cld/cm/LOCK ; fi

ROOTPASSWORD=""

for OPTS in ${@:1}
do
echo $OPTS | grep -q '\-\-os=' && OS=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-template=' && TEMPLATE=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-name=' && VMNAME=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-cpu=' && VMCPU=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-ram=' && VMMEMORY=$(expr `echo $OPTS | cut -d '=' -f 2` \* 1024)
echo $OPTS | grep -q '\-\-disk=' && DISK=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-ip=' && IPADDR=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-mac=' && MACADDR=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-gate=' && GATEWAY=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-netmask=' && NTMASK=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-id=' && VMID=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-password=' && ROOTPASSWORD=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-keys=' && KEYS=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-storage=' && STORAGE=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-storagetype=' && STORAGE_TYPE=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-dc=' && DC=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-autologin=' && AUTO_LOGIN=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-privatenet=' && PRIVATENET=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-hyper=' && HYPER=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q '\-\-debug' && DEBUG=YES
done

[ "$HPR_PREFIX" == "" ] && HPR_PREFIX=HPR

[ "$HYPERVISOR" != "" ] && HYPERVISOR=$(CLOUDS_USER_ALLOWED | grep -i "^$HPR_PREFIX" | grep "$HYPER" | head -1)

if [ "$HYPERVISOR" == "" ]
then
echo Please choose HYPERVISOR
select VM in $(CLOUDS_USER_ALLOWED | grep -i "^$HPR_PREFIX")
do
if [ "$VM" ]
then
HYPERVISOR=$VM
echo
break
fi
done
fi

if [ "$OS" == "" ]
then
echo Please choose OS
select OS in $(echo "$OS_SETS" | cut -d _ -f 1)
do
if [ "$OS" ]
then
OS=$OS
echo
break
fi
done
fi

if [ "$VMNAME" == "" ]
then
while ! [[ "$VMNAME" =~  ^[a-z0-9.-]{3,61}$ ]]
do
echo "Please enter the VIRTUAL MACHINE NAME using only 'a-z 0-9 - .' symbols
Example: example.com"
echo -n '#? '; read VMNAME
echo
done
fi

if [ "$VMCPU" == "" ]
then
while ! [[ "$VMCPU" =~  ^([1-9]|[1-8][0-9]|9[0-9]|1[01][0-9]|12[0-8])$ ]]
do
echo "Please enter the CPU CORES using only '0-9' symbols
Example: 2"
echo -n '#? '; read VMCPU
echo
done
fi

if [ "$VMMEMORY" == "" ]
then
while ! [[ "$VMMEMORY" =~  ^([1-9]|[1-8][0-9]|9[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6])$ ]]
do
echo "Please enter the RAM GB using only '0-9' symbols
Example: 2"
echo -n '#? '; read VMMEMORY
echo
done
VMMEMORY=$(expr ${VMMEMORY} \* 1024)
fi

if [ "$DISK" == "" ]
then
while ! [[ "$DISK" =~  ^([1-8][0-9]|9[0-9]|[1-8][0-9]{2}|900)$ ]]
do
echo "Please enter the DISK SPACE GB using only '0-9' symbols
Example: 20"
echo -n '#? '; read DISK
echo
done
fi

if [ "$IPADDR" == "" ]
then
while ! [[ "$IPADDR" =~  ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]
do
echo "Please enter the MAIN IP ADDRESS using only '0-9 .' symbols
Example: 1.2.3.4"
echo -n '#? '; read IPADDR
echo
done
fi

if [ "$MACADDR" == "" ]
then
while ! [[ "$MACADDR" =~  ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$ ]]
do
echo "Please enter the MAC ADDRESS using only '0-9 a-z :' or press ENTER to SKIP"
echo -n '#? '; read MACADDR
echo
[ "$MACADDR" == "" ] && break
done
fi

if [ "$GATEWAY" == "" ]
then
while ! [[ "$GATEWAY" =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]
do
echo "Please enter the GATEWAY ADDRESS using only '0-9 .' symbols
Example: 1.2.3.1"
echo -n '#? '; read GATEWAY
echo
done
fi

if [ "$NTMASK" = "" ] ; then NTMASK="255.255.255.0" ; fi

if [ "$STORAGE" == "" ]
then
echo "Please choose PVE STORAGE"
select STORAGE in $(get-storage-pools)
do
STORAGE=$STORAGE
echo
break
done
fi

if [ "$STORAGE" == "" ]
then
while ! [[ "$STORAGE" =~  [a-z0-9]+ ]]
do
echo "Please enter the PVE STORAGE NAME using only 'a-z 0-9' symbols
Example: zfs01"
echo -n '#? '; read STORAGE
echo
done
fi

echo "$STORAGE" | grep -q zfs && export STORAGE_TYPE=zfs
echo "$STORAGE" | grep -q lvm && export STORAGE_TYPE=lvm
echo "$STORAGE" | grep -q qcow && export STORAGE_TYPE=qcow2

if [ "$STORAGE_TYPE" == "" ]
then
while ! [[ "$STORAGE_TYPE" =~  [a-z0-9]+ ]]
do
echo "Please enter the PVE STORAGE TYPE using only 'a-z 0-9' symbols
Example: zfs lwm qcow2"
echo -n '#? '; read STORAGE_TYPE
echo
done
fi

if [ "$VMID" = "" ]
then
echo VMID is not defined - detecting - please wait
VMID=$(expr `get-last-vmid` + 1)
[ "$VMID" -lt "100" ] && VMID=10001
echo VMID is $VMID
echo
fi

if [ "$ROOTPASSWORD" = "" ] ; then ROOTPASSWORD=$(date +%s | sha256sum | base64 | head -c 32 ; echo -n) ; fi

if [ "$DC" = "" ] ; then DC='*' ; fi

SSH_KEYS=$(cat /root/.ssh/id_rsa.pub)

# REQ_CPU=$(echo "$VMCPU*1" | bc | cut -d '.' -f 1) ;
# REQ_MEMORY=$(echo "$VMMEMORY*1/1024" | bc | cut -d '.' -f 1)
# REQ_DISK=$(echo "$DISK*0.6" | bc | cut -d '.' -f 1)

# ### HYPERVISOR SELECTOR RATING ALGORITM START
# rm -f /var/cld/cm/tmp/select_hyper_list ; rm -f /var/cld/cm/tmp/choice_hyper_list
# touch /var/cld/cm/tmp/select_hyper_list ; touch /var/cld/cm/tmp/choice_hyper_list
# for HPR_RES in $(cat /var/cld/cm/dc/${DC}/res_hyper_list | grep -vf /var/cld/cm/dc/${DC}/hyper_list_ignore)
#  do
#  HPR_CPU=$(echo "$HPR_RES" | cut -d '_' -f 2)
#  HPR_MEMORY=$(echo "$HPR_RES" | cut -d '_' -f 3)
#  HPR_DISK=$(echo "$HPR_RES" | cut -d '_' -f 4)
#  if [[ "$REQ_CPU" -lt "$HPR_CPU" && "$REQ_MEMORY" -lt "$HPR_MEMORY" && "$REQ_DISK" -lt "$HPR_DISK" ]]; then echo "$HPR_RES" >> /var/cld/cm/tmp/select_hyper_list ; fi
# done

# for HPR_RES in $(cat /var/cld/cm/tmp/select_hyper_list)
# do
#  HPR_CPU=$(echo "$HPR_RES" | cut -d '_' -f 2)
#  HPR_MEMORY=$(echo "$HPR_RES" | cut -d '_' -f 3)
#  HPR_DISK=$(echo "$HPR_RES" | cut -d '_' -f 4)
#  MORE_REQ_CPU=$(expr $HPR_CPU - $REQ_CPU)
#  MORE_REQ_MEMORY=$(expr $HPR_MEMORY - $REQ_MEMORY)
#  MORE_REQ_DISK=$(expr $HPR_DISK - $REQ_DISK)
#  RATE_REQ_CPU=$(echo "$MORE_REQ_CPU*1" | bc | cut -d '.' -f 1)
#  RATE_SCORE=$(expr $RATE_REQ_CPU + $MORE_REQ_MEMORY)
#  HPR_SCORE=$(echo "$HPR_RES" | awk '{print $1}')
#  if [[ "$MORE_REQ_CPU" -gt 1 && "$MORE_REQ_MEMORY" -gt 3 && "$MORE_REQ_DISK" -gt 5 ]]; then echo "$RATE_SCORE $HPR_SCORE"  >> /var/cld/cm/tmp/choice_hyper_list ; fi
# done
# ### HYPERVISOR SELECTOR RATING ALGORITM END
# if [ "$DC" = "*" ] ; then DC=`grep -l $(awk '{print $2}' /var/cld/cm/tmp/choice_hyper_list | cut -d _ -f 1) /var/cld/cm/dc/*/hyper_list | awk -F '/' '{print $5}'` ; fi

#DETECT VARIABLES
HPR_NAME=$(echo ${HYPERVISOR} | cut -d '_' -f 1)
HPR=$(echo ${HYPERVISOR} | cut -d '_' -f 2)
if [ "$HPR" = "" ] ; then
 echo "No suitable hypervisor is detected, cluster expansion may be required, or the hypervisor resource requirements may be adjusted in this script" ; exit 1
fi
HPR_PORT=$(echo ${HYPERVISOR} | cut -d '_' -f 3)
HPR_USER=$(echo ${HYPERVISOR} | cut -d '_' -f 4)
HPR_DC=$(echo ${HPR_NAME} | cut -d '-' -f 2)
# echo $STORAGE | grep -q "^$" && STORAGE=$(cat /var/cld/cm/tmp/choice_hyper_list | sort -nr | awk '{print $2}' | head -1 | cut -d '_' -f 5 | cut -d ':' -f 2)
# echo $STORAGE_TYPE | grep -q "^$" && STORAGE_TYPE=$(cat /var/cld/cm/tmp/choice_hyper_list | sort -nr | awk '{print $2}' | head -1 | cut -d '_' -f 5 | cut -d ':' -f 1)

NTWRK=$(echo $GATEWAY | sed -r "s#([0-9]+\.[0-9]+\.[0-9]+).*#\1.`echo $GATEWAY | cut -d '.' -f 4 | xargs -I ^ expr ^ - 1`#g")
BRDCST=$(echo $GATEWAY | sed -r "s#([0-9]+\.[0-9]+\.[0-9]+).*#\1.255#g")
CIDR=$(whatmask $IPADDR/$NTMASK | grep 'CIDR' | awk '{ print $4  }')

DC_PROVIDER=$HPR_DC

# source /var/cld/cm/bin/include/dc_functions
# source /var/cld/cm/bin/include/dc_vars
# if echo "$DC_PROVIDER" | grep --quiet "caovh" ; then
#  caovh-creds
#  HPR_NAME=$(caovh-get-servicename-by-ip)
#  caovh-move-ip
#  GATEWAY=$(caovh-get-gateway-by-servicename)
#  MACADDR=$(grep $IPADDR /var/cld/cm/dc/caovh_ip_list | cut -d _ -f 2)
#  DC_CONFIGURE_KVM=$CAOVH_CONFIGURE_KVM
#  DC_OS_CONFIGURATION=$CAOVH_OS_CONFIGURATION
# else
#  DC_ACTIONS=""
#  DC_CONFIGURE_KVM=""
#  DC_OS_CONFIGURATION=""
# fi

source /var/cld/cm/bin/include/autologin_vars
source /var/cld/cm/bin/include/privatenet_vars
source /var/cld/cm/bin/include/create_logic

### DEBUG MODE
DEBUG_CMD=$(cat << EOL
Hypervisor: $HYPERVISOR
Datacenter: $HPR_DC
$CMD_CREATE_SET
EOL
)
echo $DEBUG | grep -q YES && (
cat << EOL
$DEBUG_CMD
EOL
)
echo $DEBUG | grep -q YES && truncate -s 0 /var/cld/cm/LOCK
echo $DEBUG | grep -q YES && exit 1

echo $DEBUG | grep -q YES || (
cat << EOL
Hypervisor: $HYPERVISOR
Datacenter: $HPR_DC
$CONSTANTS
EOL
)

echo
echo "Approve settings?"
echo -n "y/n: " && read ANSWER ; if [ "$ANSWER" = "y" ]
then
echo
else
truncate -s 0 /var/cld/cm/LOCK
exit 1
fi


echo "${VMID}" > /var/cld/cm/data/last_vmid

LOG_FILE=/var/log/cld/cm/${VMID}_create.log

echo "{\"vmid\":\"$VMID\",\"cpu\":\"$VMCPU\",\"ram\":\"$VMMEMORY\",\"disk\":\"$DISK\",\"received\":\"1\",\"keys\":\"$SSH_KEYS\",\"dc\":\"$DC\",\"os\":\"$OS\",\"name\":\"$VMNAME\",\"ip\":\"$IPADDR\",\"gate\":\"$GATEWAY\",\"netmask\":\"$NTMASK\",\"password\":\"$ROOTPASSWORD\",\"storage\":\"$STORAGE\",\"storage_type\":\"$STORAGE_TYPE\",\"mac\":\"$MACADDR\"}" >> /var/cld/cm/data/vms_info

echo "${VMID}_${HPR}_${HPR_PORT}" >> /var/cld/cm/data/vmid_hyper_list

cat >> ${LOG_FILE} << EOLOG
$CMD_CREATE_SET
EOLOG

(
ssh -q -p $HPR_PORT -o "StrictHostKeyChecking no" -o "RequestTTY force" ${HPR_USER}@$HPR "sudo bash -s" << EOL
$CMD_CREATE_SET
exit
EOL
) 2>&1 | tee -a ${LOG_FILE}

echo "${VMNAME}_${IPADDR}_22_root_${ROOTPASSWORD}" >> /var/cld/ext_srv
if echo `ssh -q -p $HPR_PORT -o "StrictHostKeyChecking no" -o "RequestTTY force" ${HPR_USER}@$HPR "sudo qm list | grep $VMID"` | grep --quiet "running"
then echo "OK" >> ${LOG_FILE} ; send_tg Cloud \`${VMID}\` *created*'\n'Log file: \`${LOG_FILE}\`
else echo "FAIL" >> ${LOG_FILE} ; send_tg Cloud \`${VMID}\` *Error* while creating'\n'Log file: \`${LOG_FILE}\`
fi

#Get VMMAC after create
VMMAC=`ssh -q -p $HPR_PORT -o "StrictHostKeyChecking no" ${HPR_USER}@$HPR "sudo grep net0 /etc/pve/qemu-server/${VMID}.conf | egrep -o \"([0-9A-Z]{2}\:){5}[0-9A-Z]{2}\""`

truncate -s 0 /var/cld/cm/LOCK

if echo "`stat /var/cld/cm/data/queue_create | awk 'NR==2 {print $2}'`" | grep -q "^0$"
then
 exit 0
else
CMD_CREATE="`head -1 /var/cld/cm/data/queue_create`"
sed -i '1d' /var/cld/cm/data/queue_create
echo ${CMD_CREATE} | bash
fi
