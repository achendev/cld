#!/bin/bash
source /var/cld/bin/include/cldfuncs

for OPTS in ${@:1}
do
echo $OPTS | grep -q  '\--deploy=' && DEPLOY=$(echo $OPTS | cut -d '=' -f 2)
done

source /var/cld/deploy/templates/${DEPLOY}/vars

for OPTS in ${@:1}
do
echo $OPTS | grep -q  '^\--clouds=' && CLOUDS="$(echo $OPTS | cut -d '=' -f 2 | tr ',' '\n')"
echo $OPTS | grep -q  '^\--test=' && TEST=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--nextdeploy=' && NEXT_DEPLOY=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--nextdeploywait=' && NEXT_DEPLOY_WAIT=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--nextdeployargs=' && NEXT_DEPLOY_ARGS=$(echo $OPTS | cut -d '=' -f 2-)
echo $OPTS | grep -q  '^\--backup=' && BACKUP=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--custombackup=' && CUSTOM_BACKUP=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--async=' && ASYNC=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--debug=' && DEBUG=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--cron=' && CRON=$(echo $OPTS | cut -d '=' -f 2)
done

test "$CLOUDS" || CLOUDS="$(cat /var/cld/deploy/deploys/${DEPLOY}/clouds 2>/dev/null)"
test "$CLOUDS" || echoexit1 "CLOUDS is not defined"

ACTION_PREFIX=$(uuidgen  | cut -b -5)
ACTION_NAME=${DEPLOY}_${ACTION_PREFIX}
mkdir -p /var/cld/deploy/actions/ &>/dev/null
cp -r /var/cld/deploy/deploys/${DEPLOY} /var/cld/deploy/actions/${ACTION_NAME}

echo "${CLOUDS}" > /var/cld/deploy/actions/${ACTION_NAME}/clouds
CLOUDS="$(cat /var/cld/deploy/actions/${ACTION_NAME}/clouds)"
DEPLOY_SCRIPT="$(cat /var/cld/deploy/actions/${ACTION_NAME}/script)"
[ "$TEST" == "1" ] && DEPLOY_TEST_SCRIPT="$(cat /var/cld/deploy/actions/${ACTION_NAME}/test_script)"
test "$DEPLOY_TEST_SCRIPT" || TEST=0

cat > /var/cld/deploy/actions/${ACTION_NAME}/vars << EOVARS
DESCRIPTION="${DESCRIPTION}"
BACKUP="${BACKUP}"
CUSTOM_BACKUP="${CUSTOM_BACKUP}"
TEST="${TEST}"
ASYNC="${ASYNC}"
NEXT_DEPLOY="${NEXT_DEPLOY}"
NEXT_DEPLOY_WAIT="${NEXT_DEPLOY_WAIT}"
NEXT_DEPLOY_ARGS="${NEXT_DEPLOY_ARGS}"
DEBUG=${DEBUG}
CRON="${CRON}"
EOVARS

source /var/cld/deploy/actions/${ACTION_NAME}/vars

test "$ASYNC" == 1 && BACKGROUND='&>/dev/null &'

OUTPUT_FORMAT=$(cat << 'EOUTPUT'
stty rows 50 columns 2000 ; TERM=xterm
PS1='\[\033[01;34m\]\D{%d-%m-%Y %T} \[\e[38;5;172m\]\u\[\033[01;33m\]@\[\033[01;36m\]\H \[\033[01;33m\]\w \[\033[01;35m\]> \[\033[00m\]'
exec 9>&2; exec 8> >(while IFS='' read -r line || [ -n "$line" ]; do printf "\033[31m${line}\033[0m\n"; done)
trap "exec 2>&8;" DEBUG; PROMPT_COMMAND='exec 2>&9;'
unset HISTFILE
EOUTPUT
)
DEPLOY_INIT=$(cat << EOACTIONVARS
ACTION_PREFIX="$(date +%d%m%Y_%H-%M-%)"
ACTION_NAME="${ACTION_NAME}"
EOACTIONVARS
)
[ "$SUDO_USER" = "" ] && SUDO_USER=admin
for VM in $(CLOUDS_USER_ALLOWED | grep "${CLOUDS}")
do
  CLD_DEPLOY_LOGS
  if [ "$VM" = "" ] ; then
   echo "VM is not defined"
  else
    GROUP=$(grep -l $VM /var/cld/access/groups/*/clouds | cut -d '/' -f 6)
    if [ "$GROUP" = "" ] ; then echo "choosen CLOUD have incorrect GROUP" ; exit 1 ; fi
    if grep -qs "1" /var/cld/access/groups/${GROUP}/funcs
    then
    source <(for GROUPFUNC in funcvars funcdeploy funcdeploynotty
        do
          echo "${GROUP}_${GROUPFUNC}(){"
          cat /var/cld/access/groups/${GROUP}/${GROUPFUNC}
          echo '}'
        done)
      CLD_VARS=${GROUP}_funcvars
      CLD_DEPLOY=${GROUP}_funcdeploy
      CLD_DEPLOY_NOTTY=${GROUP}_funcdeploynotty
    else
      CLD_VARS=EXTERNAL_VARS
      CLD_DEPLOY=EXTERNAL_DEPLOY
      CLD_DEPLOY_NOTTY=EXTERNAL_DEPLOY_NOTTY
    fi
    echo -e "Deploy started at \033[43m$VM\033[00m"
    $CLD_VARS
    echo
    SCRIPT_LENGTH=$(wc -l << EODEPLOYRUN
$OUTPUT_FORMAT
$DEPLOY_INIT
$DEPLOY_SCRIPT
$DEPLOY_INIT
$OUTPUT_FORMAT
EODEPLOYRUN
)
    [ "$DEBUG" == "1" ] && SCRIPT_LENGTH=0
    source <(
    echo "("
    cat << 'EOSOURCE'
$CLD_DEPLOY << EODEPLOYRUN | cldtail ${SCRIPT_LENGTH} | tee -a $CLD_ACTION_LOG
$OUTPUT_FORMAT
$DEPLOY_INIT
$DEPLOY_SCRIPT
exit &>/dev/null
EODEPLOYRUN
[ "$TEST" == "1" ] && $CLD_DEPLOY_NOTTY << EODEPLOYTEST | tee -a $CLD_ACTION_TEST_LOG 
$DEPLOY_INIT
$DEPLOY_TEST_SCRIPT
EODEPLOYTEST
EOSOURCE
    echo ") ${BACKGROUND}"
)
     echo
     echo -e "Log file: \033[43m$CLD_ACTION_LOG\033[00m"
     echo
     test "$BACKGROUND" && sleep 0.1s
  fi
done
test "$NEXT_DEPLOY" && source <(cat << EONEXTDEPLOY
$([ "$NEXT_DEPLOY_WAIT" == "1" ] && echo "echo Waiting for deploy end before start next deploy; echo ; wait")
/var/cld/deploy/bin/cld-deploy --deploy="${NEXT_DEPLOY}" $(test "$NEXT_DEPLOY_ARGS" && echo "${NEXT_DEPLOY_ARGS}")
EONEXTDEPLOY
)
test "$BACKGROUND" && while :; do ps axfu | grep -v grep | grep "tee -a /var/cld/deploy/actions/${ACTION_NAME}/" || DONE=1 ; test "$DONE" == 1 && echo "DONE=1" >> /var/cld/deploy/actions/${ACTION_NAME}/vars && break ; sleep 1s ; done &>/dev/null &
test "$BACKGROUND" && disown