#!/bin/bash
source /var/cld/bin/include/cldfuncs
ARG1=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -1)
ARG2=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -2 | tail -1)
ARG3=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -3 | tail -1)

for OPTS in ${@:1}
do
echo $OPTS | grep -q  '\--deploy=' && DEPLOY=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '\--run' && RUN=1
done

if [ "$DEPLOY" == "" -a "$RUN" != "1" ]
then
echo Please choose deploy:
select DEPLOY_SELECT in $(ls /var/cld/deploy/deploys/ | grep "$ARG1" | grep "$ARG2" | grep "$ARG3")
do
DEPLOY=$DEPLOY_SELECT
echo
break
done
fi

[ "$DEPLOY" ] && source /var/cld/deploy/deploys/${DEPLOY}/vars

for OPTS in ${@:1}
do
echo $OPTS | grep -q  '^\--clouds=' && CLOUDS="$(echo $OPTS | cut -d '=' -f 2 | tr ',' '\n')"
echo $OPTS | grep -q  '^\--groups=' && CLD_GROUPS="$(echo $OPTS | cut -d '=' -f 2)"
echo $OPTS | grep -q  '^\--test=' && TEST=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--retry=' && RETRY=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--timeout=' && TIMEOUT=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--testtimeout=' && TEST_TIMEOUT=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--backuptimeout=' && BACKUP_TIMEOUT=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--nextdeploy=' && NEXT_DEPLOY=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--nextdeploywait=' && NEXT_DEPLOY_WAIT=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--nextdeployargs=' && NEXT_DEPLOY_ARGS=$(echo $OPTS | cut -d '=' -f 2-)
echo $OPTS | grep -q  '^\--backup=' && BACKUP=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--backuplist=' && BACKUP_LIST="$(echo $OPTS | cut -d '=' -f 2 | tr ',' '\n')"
echo $OPTS | grep -q  '^\--custombackup=' && CUSTOM_BACKUP=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--async=' && ASYNC=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--debug=' && DEBUG=$(echo $OPTS | cut -d '=' -f 2)
echo $OPTS | grep -q  '^\--cron=' && CRON=$(echo $OPTS | cut -d '=' -f 2)
done

[ "$BACKUP" == 1 -a "$BACKUP_LIST" == "" ] && BACKUP_LIST="$(cat /var/cld/deploy/deploys/${DEPLOY}/backup_list 2>/dev/null)"
[ "$BACKUP" == 1 -a "$BACKUP_LIST" == "" ] && echoexit1 "BACKUP_LIST is not defined" 

[ "$CLOUDS" ] || CLOUDS="$(cat /var/cld/deploy/deploys/${DEPLOY}/clouds 2>/dev/null)"
[ "$CLOUDS" ] || echoexit1 "CLOUDS is not defined"

ACTION_PREFIX=$(date +%d%m%Y_%H-%M-%S)
ACTION_NAME=${DEPLOY}_${ACTION_PREFIX}
mkdir -p /var/cld/deploy/actions/ &>/dev/null
cp -r /var/cld/deploy/deploys/${DEPLOY} /var/cld/deploy/actions/${ACTION_NAME}
[ "$CLOUDS" ] && echo "${CLOUDS}" > /var/cld/deploy/actions/${ACTION_NAME}/clouds
[ "$BACKUP_LIST" ] && echo "${BACKUP_LIST}" > /var/cld/deploy/actions/${ACTION_NAME}/backup_list

cat > /var/cld/deploy/actions/${ACTION_NAME}/vars << EOVARS
DESCRIPTION="${DESCRIPTION}"
CLD_GROUPS="${CLD_GROUPS}"
BACKUP="${BACKUP}"
CUSTOM_BACKUP="${CUSTOM_BACKUP}"
TEST="${TEST}"
RETRY="${RETRY}"
ASYNC="${ASYNC}"
TIMEOUT="${TIMEOUT}"
TEST_TIMEOUT="${TEST_TIMEOUT}"
BACKUP_TIMEOUT="${BACKUP_TIMEOUT}"
NEXT_DEPLOY="${NEXT_DEPLOY}"
NEXT_DEPLOY_WAIT="${NEXT_DEPLOY_WAIT}"
NEXT_DEPLOY_ARGS="${NEXT_DEPLOY_ARGS}"
DEBUG=${DEBUG}
CRON="${CRON}"
EOVARS

if [ "$RUN" != "1" ]
then
echo Deploy config: "$(echo;cat /var/cld/deploy/actions/${ACTION_NAME}/vars)"
select DEPLOY_CONFIG_SELECT in continue edit
do
[ "$DEPLOY_CONFIG_SELECT" == "continue" ] && echo -n ""
[ "$DEPLOY_CONFIG_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${ACTION_NAME}/vars
break
done
fi

source /var/cld/deploy/actions/${ACTION_NAME}/vars

if [ "$BACKUP" == 1 -a "$RUN" != "1" ]
then
echo Backup list is: $(echo;cat /var/cld/deploy/actions/${ACTION_NAME}/backup_list)
select BACKUP_LIST_SELECT in continue edit
do
[ "$BACKUP_LIST_SELECT" == "continue" ] && echo -n ""
[ "$BACKUP_LIST_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${ACTION_NAME}/backup_list
break
done
fi

if [ "$RUN" != "1" ]
then
echo Instance list is: $(echo;cat /var/cld/deploy/actions/${ACTION_NAME}/clouds)
select INSTANCE_LIST_SELECT in continue edit
do
[ "$INSTANCE_LIST_SELECT" == "continue" ] && echo -n ""
[ "$INSTANCE_LIST_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${ACTION_NAME}/clouds
break
done
fi

if [ "$TEST" == 1 -a "$RUN" != "1" ]
then
echo Test script is: $(echo;cat /var/cld/deploy/actions/${ACTION_NAME}/test_script)
select DEPLOY_TEST_SELECT in continue edit
do
[ "$DEPLOY_TEST_SELECT" == "continue" ] && echo -n ""
[ "$DEPLOY_TEST_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${ACTION_NAME}/test_script
break
done
fi
[ "$RUN" != "1" ]  && source /var/cld/deploy/actions/${ACTION_NAME}/vars

CLOUDS="$(cat /var/cld/deploy/actions/${ACTION_NAME}/clouds)"
DEPLOY_SCRIPT="$(cat /var/cld/deploy/actions/${ACTION_NAME}/script)"
[ "$TEST" == "1" ] && DEPLOY_TEST_SCRIPT="$(cat /var/cld/deploy/actions/${ACTION_NAME}/test_script)"
[ "$RETRY" ] || RETRY=1
[ "$DEPLOY_TEST_SCRIPT" ] || TEST=0
[ "$TIMEOUT" ] || TIMEOUT=600
[ "$TEST_TIMEOUT" ] || TEST_TIMEOUT=120
[ "$BACKUP_TIMEOUT" ] || BACKUP_TIMEOUT=120

[ "$ASYNC" == 1 ] && BACKGROUND='&>/dev/null &'
[ "$BACKUP" == 1 ] && BACKUP_LIST="$(cat /var/cld/deploy/actions/${ACTION_NAME}/backup_list)"
[ "$BACKUP" == 1 -a "$BACKUP_LIST" == "" ] && echoexit1 "BACKUP_LIST is not defined"

OUTPUT_FORMAT=$(cat << 'EOUTPUT'
stty rows 50 columns 2000 ; TERM=xterm
PS1='\[\033[01;34m\]\D{%d-%m-%Y %T} \[\e[38;5;172m\]\u\[\033[01;33m\]@\[\033[01;36m\]\H \[\033[01;33m\]\w \[\033[01;35m\]> \[\033[00m\]'
exec 9>&2; exec 8> >(while IFS='' read -e line || [ -n "$line" ]; do printf "\033[31m${line}\033[0m\n"; done)
trap "exec 2>&8;" DEBUG; PROMPT_COMMAND='exec 2>&9;'
END_DEPLOY() { exit &>/dev/null; } ; unset HISTFILE
EOUTPUT
)
DEPLOY_INIT=$(cat << EOACTIONVARS
ACTION_PREFIX="${ACTION_PREFIX}"
ACTION_NAME="${ACTION_NAME}"
EOACTIONVARS
)
[ "$SUDO_USER" = "" ] && SUDO_USER=admin
for VM in $(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}")
do
  CLD_DEPLOY_LOGS
  if [ "$VM" = "" ] ; then
   echo "VM is not defined"
  else
    GROUP=$(grep -l $VM /var/cld/access/groups/*/clouds | cut -d '/' -f 6)
    if [ "$GROUP" = "" ] ; then sleep 1s; GROUP=$(grep -l $VM /var/cld/access/groups/*/clouds | cut -d '/' -f 6) ; fi
    if [ "$GROUP" = "" ] ; then echo "$VM have incorrect GROUP" ; continue ; fi
    if grep -qs "1" /var/cld/access/groups/${GROUP}/funcs
    then
    source <(for GROUPFUNC in funcvars funcdeploy funcdeploynotty
        do
          echo "${GROUP}_${GROUPFUNC}(){"
          cat /var/cld/access/groups/${GROUP}/${GROUPFUNC}
          echo '}'
        done)
      CLD_VARS=${GROUP}_funcvars
      CLD_DEPLOY=${GROUP}_funcdeploy
      CLD_DEPLOY_NOTTY=${GROUP}_funcdeploynotty
    else
      CLD_VARS=EXTERNAL_VARS
      CLD_DEPLOY=EXTERNAL_DEPLOY
      CLD_DEPLOY_NOTTY=EXTERNAL_DEPLOY_NOTTY
    fi
    echo -e "Deploy started at $VM\e[48;5;6m          \e[K\e[00m"
    $CLD_VARS
#    [ "$BACKGROUND" ] || echo
    [ "$DEBUG" == "1" ] && SHOW_ALL=1 || SHOW_ALL=0
    [ "$DEBUG" == "1" ] && CONNECT_ARGS="-v" || CONNECT_ARGS="-q"
    source <(
    echo "("
    cat << 'EOSOURCE'
[ "$BACKUP_TIMEOUT" ] && TIMEOUT_NOTTY=$BACKUP_TIMEOUT || TIMEOUT_NOTTY=600
[ "$BACKUP" == "1" ] && for DEPLOY_BACKUP_ITTER in $(seq 1 $RETRY)
do
DEPLOY_BACKUP_CHECK_LOG=$(grep -qs "BACKUP_OK" $CLD_ACTION_BACKUP_LOG && echo 0 || echo 1)
if [ "$DEPLOY_BACKUP_CHECK_LOG" != "0" ]
then
$CLD_DEPLOY_NOTTY << EODEPLOYBACKUP | tee -a $CLD_ACTION_BACKUP_LOG
$DEPLOY_INIT
tar zcvf /tmp/backup_${ACTION_NAME}.tar.gz -T <(echo "$BACKUP_LIST") && echo BACKUP_OK || echo BACKUP_FAIL
EODEPLOYBACKUP
DEPLOY_BACKUP_CHECK_LOG=$(grep -qs "BACKUP_OK" $CLD_ACTION_BACKUP_LOG && echo 0 || echo 1)
else
break
fi
done

[ "$BACKUP" == "1" -a "$DEPLOY_BACKUP_CHECK_LOG" != "0" ] && continue
[ "$TIMEOUT" ] || TIMEOUT=3600
for DEPLOY_ITTER in $(seq 1 $RETRY)
do
DEPLOY_CHECK_LOG=$(grep -qs "@.*>.*#BEGIN_DEPLOY" $CLD_ACTION_LOG && echo 0 || echo 1)
if [ "$DEPLOY_CHECK_LOG" == "1" ]
then
$CLD_DEPLOY $CONNECT_ARGS << EODEPLOYRUN | cldtail ${SHOW_ALL} | tee -a $CLD_ACTION_LOG
$OUTPUT_FORMAT
$DEPLOY_INIT
#BEGIN_DEPLOY
$DEPLOY_SCRIPT
END_DEPLOY
EODEPLOYRUN
else
break
fi
done

[ "$TEST_TIMEOUT" ] && TIMEOUT_NOTTY=$TEST_TIMEOUT || TIMEOUT_NOTTY=600
[ "$TEST" == "1" ] && for DEPLOY_TEST_ITTER in $(seq 1 $RETRY)
do
DEPLOY_TEST_CHECK_LOG=$(grep -qs "[0-9]" $CLD_ACTION_TEST_LOG && echo 0 || echo 1)
if [ "$DEPLOY_TEST_CHECK_LOG" == "1" ]
then
$CLD_DEPLOY_NOTTY << EODEPLOYTEST | tee -a $CLD_ACTION_TEST_LOG
$DEPLOY_INIT
$DEPLOY_TEST_SCRIPT
EODEPLOYTEST
else
break
fi
done
EOSOURCE
    echo ") ${BACKGROUND}"
)
#     [ "$BACKGROUND" ] || echo
     echo -e "Log file: $CLD_ACTION_LOG\e[48;5;6m          \e[K\e[00m"
     echo
     test "$BACKGROUND" && sleep 0.1s
  fi
done
if [ "$BACKGROUND" ]
	then
	    while :; do ps axfu | grep -v grep | grep "tee -a /var/cld/deploy/actions/${ACTION_NAME}/" || DONE=1 ; test "$DONE" == 1 && echo "DONE=1" >> /var/cld/deploy/actions/${ACTION_NAME}/vars && break ; sleep 1s ; done &>/dev/null &
    else
        DONE=1 ; test "$DONE" == 1 && echo "DONE=1" >> /var/cld/deploy/actions/${ACTION_NAME}/vars
fi
[ "$BACKUP" == "1" -a "$ASYNC" == "1" ] && source <(echo "echo Waiting for deploy end before check backups status; echo ; wait")
if [ "$BACKUP" == "1" ]
    then
        AMOUNT_BACKUP_PASSED=$(grep -l "BACKUP_OK" /var/cld/deploy/actions/${ACTION_NAME}/backup_log/* | wc -l)
        AMOUNT_INSTANCES=$(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}" | wc -l)
        if [ "${AMOUNT_BACKUP_PASSED}" == "${AMOUNT_INSTANCES}" ] 
        then 
            echo BACKUP_STATUS=0 > /var/cld/deploy/actions/${ACTION_NAME}/backup_log/status
            echo ${AMOUNT_BACKUP_PASSED}/${AMOUNT_INSTANCES} backup completed
        else
            echo BACKUP_STATUS=1 > /var/cld/deploy/actions/${ACTION_NAME}/backup_log/status 
            echo -e "\e[01;31m${AMOUNT_BACKUP_PASSED}\e[00m/${AMOUNT_INSTANCES} backups completed"
        fi | tee -a  /var/cld/deploy/actions/${ACTION_NAME}/backup_log/status_log
fi
[ "$TEST" == "1" -a "$ASYNC" == "1" ] && source <(echo "echo Waiting for deploy end before check tests status; echo ; wait")
if [ "$TEST" == "1" ]
    then
        AMOUNT_TEST_PASSED=$(grep -l "^0$" /var/cld/deploy/actions/${ACTION_NAME}/test_log/* | wc -l)
        AMOUNT_INSTANCES=$(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}" | wc -l)
        if [ "${AMOUNT_TEST_PASSED}" == "${AMOUNT_INSTANCES}" ] 
        then 
            echo TEST_STATUS=0 > /var/cld/deploy/actions/${ACTION_NAME}/test_log/status
            echo ${AMOUNT_TEST_PASSED}/${AMOUNT_INSTANCES} tests passed
        else
            echo TEST_STATUS=1 > /var/cld/deploy/actions/${ACTION_NAME}/test_log/status	
            echo -e "\e[01;31m${AMOUNT_TEST_PASSED}\e[00m/${AMOUNT_INSTANCES} tests passed\nFailed deploy logs:"
            for FAILED_INSTANCE in $(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}" | grep -v  "$(grep -l "^0$" /var/cld/deploy/actions/${ACTION_NAME}/test_log/* | cut -d / -f 8)")
            do
            echo "$(du /var/cld/deploy/actions/${ACTION_NAME}/deploy_log/${FAILED_INSTANCE} | awk '{print $2" "$1}')"
            done
        fi | tee -a  /var/cld/deploy/actions/${ACTION_NAME}/test_log/status_log
fi
[ "$NEXT_DEPLOY" ] && source <(cat << EONEXTDEPLOY
$([ "$NEXT_DEPLOY_WAIT" == "1" ] && echo "echo Waiting for deploy end before start next deploy; echo ; wait")
/var/cld/deploy/bin/cld-deploy --deploy="${NEXT_DEPLOY}" $([ "$NEXT_DEPLOY_ARGS" ] && echo "${NEXT_DEPLOY_ARGS}")
EONEXTDEPLOY
)
[ "$BACKGROUND" ] && disown &>/dev/null